name: Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - '*'

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

env:
  DEVELOPER_DIR: /Applications/Xcode.app
  GOOGLE_SERVICE_INFO_PLIST_PATH: SwiftTemplate/Sources/Configuration/Plist/Firebase/GoogleService-Info-Debug.plist

jobs:
  ci:
    name: Run Test

    runs-on: macos-15

    env:
      MINT_PATH: mint/lib
      MINT_LINK_PATH: mint/bin

    steps:
      # チェックアウト(GitHubリポジトリからソース取得)
      - uses: actions/checkout@v5

      # 環境変数設定
      - name: Set up environment variables
        run: |
          touch .env
          echo "GITHUB_ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> .env
          cat .env

      # Xcodeの一覧出力
      - name: Show Xcode List
        run: ls /Applications | grep 'Xcode'

      # Xcodeのバージョン出力
      - name: Show Xcode Version
        run: xcodebuild -version

      # 使用可能Simulatorの一覧出力
      - name: Show Simulator List
        run: xcrun simctl list devices

      # Simulatorのダウンロード
      - name: Download iOS Platform
        run: xcodebuild -downloadPlatform iOS

      # Gemsのインストール
      - name: Install Bundled Gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      # Mintインストール
      - name: Install Mint
        run: |
          brew install mint

      # Gemsのキャッシュ
      - name: Cache Gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      # Mintで管理しているライブラリのキャッシュ
      - name: Cache Mint Packages
        uses: actions/cache@v4
        with:
          path: mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-

      # SPMのライブラリのキャッシュ
      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('*.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      # GoogleService-Info.plistの復元
      - name: Decode GoogleService-Info.plist
        run: |
          echo ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_DEBUG_CONTENT }} | base64 -o ${{ env.GOOGLE_SERVICE_INFO_PLIST_PATH }} -D

      # プロジェクトファイル設定
      - name: Setting Xcode Project
        run: |
          make setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # テスト
      - name: Xcode Test
        run: set -o pipefail &&
          xcodebuild
          -workspace SwiftTemplate.xcworkspace
          -sdk iphonesimulator
          -configuration Debug
          -scheme Debug
          -testPlan 'SwiftTemplate'
          -destination 'platform=iOS Simulator,name=iPhone 16'
          -clonedSourcePackagesDirPath SourcePackages
          -resultBundlePath Test/SwiftTemplate.xcresult
          -derivedDataPath DerivedData
          -skipMacroValidation
          clean test
          | bundle exec xcpretty --report html

      # Danger実行
      - uses: MeilCli/danger-action@v6.0.35
        with:
          plugins_file: 'Gemfile'
          install_path: 'vendor/bundle'
          danger_file: 'danger/testfile'
          danger_id: 'Test'
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # テスト結果のアップロード
      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports
